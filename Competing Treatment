import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Time span for simulation
t_span = (0, 200)
t_eval = np.linspace(*t_span, 1000)

# Parameters
beta_S = 0.5        # Transmission rate for susceptible strain
gamma_S = 0.2       # Recovery rate for IS
gamma_S_T = 0.4     # Recovery rate for IS_T (faster due to treatment)
gamma_R = 0.1       # Recovery rate for IR (slower)
gamma_R_T = 0.1     # Recovery rate for IR_T (treatment not effective)
epsilon = 0.5       # Treatment reduces infection risk by 50%
tau = 0.05          # Rate of starting treatment
rho = 0.05          # Rate of stopping treatment
mu = 0.01           # Mutation rate IS_T -> IR_T
f = 0.9             # Fitness of resistant strain (slightly lower)

# Derived transmission rate for resistant strain
beta_R = f * beta_S

# Initial conditions
S0 = 0.7
S_T0 = 0.0
IS0 = 0.2
IS_T0 = 0.05
IR0 = 0.05
IR_T0 = 0.0
y0 = [S0, S_T0, IS0, IS_T0, IR0, IR_T0]

# System of ODEs
def sis_model(t, y):
    S, S_T, IS, IS_T, IR, IR_T = y
    N = S + S_T + IS + IS_T + IR + IR_T

    dS = gamma_S * IS + gamma_R * IR + rho * S_T \
         - beta_S * S * (IS + IS_T) / N - beta_R * S * (IR + IR_T) / N - tau * S

    dS_T = gamma_S_T * IS_T + gamma_R_T * IR_T + tau * S \
           - epsilon * beta_S * S_T * (IS + IS_T) / N \
           - epsilon * beta_R * S_T * (IR + IR_T) / N - rho * S_T

    dIS = beta_S * S * (IS + IS_T) / N - gamma_S * IS - tau * IS + rho * IS_T

    dIS_T = epsilon * beta_S * S_T * (IS + IS_T) / N + tau * IS \
            - gamma_S_T * IS_T - rho * IS_T - mu * IS_T

    dIR = beta_R * S * (IR + IR_T) / N - gamma_R * IR - tau * IR + rho * IR_T

    dIR_T = epsilon * beta_R * S_T * (IR + IR_T) / N + tau * IR \
            - gamma_R_T * IR_T - rho * IR_T + mu * IS_T

    return [dS, dS_T, dIS, dIS_T, dIR, dIR_T]

# Solve the system
solution = solve_ivp(sis_model, t_span, y0, t_eval=t_eval)

# Plot results
plt.figure(figsize=(12, 8))
labels = ['S', 'S_T', 'IS', 'IS_T', 'IR', 'IR_T']
for i in range(6):
    plt.plot(solution.t, solution.y[i], label=labels[i])
plt.title("Extended SIS Model with Antibiotics, Resistance, and Mutation")
plt.xlabel("Time")
plt.ylabel("Proportion of Population")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

#######
#Version with layored lines

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Base parameters
base_params = {
    'beta_S': 0.5,
    'gamma_S': 0.2,
    'gamma_S_T': 0.4,
    'gamma_R': 0.1,
    'gamma_R_T': 0.1,
    'epsilon': 0.5,
    'tau': 0.05,
    'rho': 0.05,
    'mu': 0.01,
    'f': 0.9,
}

# Time setup
t_span = (0, 200)
t_eval = np.linspace(*t_span, 1000)

# Initial conditions
y0 = [0.7, 0.0, 0.2, 0.05, 0.05, 0.0]  # [S, S_T, IS, IS_T, IR, IR_T]

# Define SIS model
def sis_model(t, y, params):
    S, S_T, IS, IS_T, IR, IR_T = y
    N = S + S_T + IS + IS_T + IR + IR_T

    beta_S = params['beta_S']
    beta_R = params['f'] * beta_S
    gamma_S = params['gamma_S']
    gamma_S_T = params['gamma_S_T']
    gamma_R = params['gamma_R']
    gamma_R_T = params['gamma_R_T']
    epsilon = params['epsilon']
    tau = params['tau']
    rho = params['rho']
    mu = params['mu']

    dS = gamma_S * IS + gamma_R * IR + rho * S_T \
         - beta_S * S * (IS + IS_T) / N - beta_R * S * (IR + IR_T) / N - tau * S

    dS_T = gamma_S_T * IS_T + gamma_R_T * IR_T + tau * S \
           - epsilon * beta_S * S_T * (IS + IS_T) / N \
           - epsilon * beta_R * S_T * (IR + IR_T) / N - rho * S_T

    dIS = beta_S * S * (IS + IS_T) / N - gamma_S * IS - tau * IS + rho * IS_T

    dIS_T = epsilon * beta_S * S_T * (IS + IS_T) / N + tau * IS \
            - gamma_S_T * IS_T - rho * IS_T - mu * IS_T

    dIR = beta_R * S * (IR + IR_T) / N - gamma_R * IR - tau * IR + rho * IR_T

    dIR_T = epsilon * beta_R * S_T * (IR + IR_T) / N + tau * IR \
            - gamma_R_T * IR_T - rho * IR_T + mu * IS_T

    return [dS, dS_T, dIS, dIS_T, dIR, dIR_T]

# Plot setup
plt.figure(figsize=(14, 8))
labels = ['S', 'S_T', 'IS', 'IS_T', 'IR', 'IR_T']
colors = ['tab:blue', 'tab:cyan', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']

# Run 10 simulations with varied parameters
for run in range(10):
    # Randomize key parameters around base values
    params = base_params.copy()
    params['beta_S'] *= np.random.uniform(0.8, 1.2)  # ±20%
    params['mu'] *= np.random.uniform(0.5, 1.5)       # ±50%
    params['f'] = np.random.uniform(0.85, 1.05)       # 0.85 to 1.05 fitness

    # Solve the system
    sol = solve_ivp(lambda t, y: sis_model(t, y, params), t_span, y0, t_eval=t_eval)

    # Plot all compartments for this run
    for i in range(6):
        plt.plot(sol.t, sol.y[i], color=colors[i], alpha=0.25)  # Faded lines for layering

# Legend and labels
for i in range(6):
    plt.plot([], [], color=colors[i], label=labels[i])  # Dummy lines for legend

plt.title("Layered SIS Model Simulations with Varying Parameters (10 Runs)")
plt.xlabel("Time")
plt.ylabel("Proportion of Population")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
